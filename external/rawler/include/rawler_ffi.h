// Automatically generated by cbindgen
// Do not modify this file directly


#pragma once

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace rawler {

enum class DataType {
    Integer = 0,
    Float = 1,
};

struct Exif {
    uint16_t orientation;
    uint32_t exposure_time[2];
    uint32_t fnumber[2];
    uint16_t iso_speed_ratings;
    char date_time_original[32];
    int32_t brightness_value[2];
    int32_t exposure_bias[2];
    uint32_t focal_length[2];
    char lens_make[32];
    char lens_model[32];
};

struct RawImage {
    /// camera make as encoded in the file
    char make[32];
    /// camera model as encoded in the file
    char model[32];
    /// make cleaned up to be consistent and short
    char clean_make[32];
    /// model cleaned up to be consistent and short
    char clean_model[32];
    /// width of the full image
    unsigned int width;
    /// height of the full image
    unsigned int height;
    /// number of components per pixel (1 for bayer, 3 for RGB images)
    unsigned int cpp;
    /// bits per pixel
    unsigned int bps;
    /// cfa pattern as a string
    char cfa[32];
    /// image black level
    float black_levels[4];
    /// image white levels
    float white_levels[4];
    /// whitebalance coefficients encoded in the file in RGBE order
    float wb_coeffs[4];
    /// color matrix
    float color_matrix[9];
    /// image exif
    Exif exif;
    /// image data type
    DataType data_type;
    /// image data pointer
    const void *data_ptr;
    /// image data length
    uintptr_t data_len;
};

extern "C" {

RawImage *decode_buffer(const unsigned char *buffer, uintptr_t len, char **error_msg);

void free_image(RawImage *image);

}  // extern "C"

}  // namespace rawler
